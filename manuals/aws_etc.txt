今の状態：awsを利用して、ec2インスタンス（仮想サーバー）、rdsインスタンス（データベースサーバー）、S3(ストレージ)を
作成し連携させることでアプリを運用している。（いずれも東京リージョン）
また、料金についてはすべて1年間の無料枠を利用しているので、試運転の段階で料金は発生していない。

---各種AWSについて---

ec2について：ローカルのマシンから遠隔のインスタンスに対してssh接続などで操作できる。apache（サーバーとして機能させるためのソフト、aws linuxでhttpdという名前）、
python,djangoをインストし仮想環境でサーバーを起動させている。
DBであるrdsとは初期で連携セットアップをしているのでコマンドで操作可能。またこのサーバーをRoute53のサービスによりIPアドレスを固定している。
サーバーでアプリを機能させるにはローカルのようにpythonの仮想環境に加え、一部のapacheファイルに設定を行うことで可能となる。

rdsについて：特筆することはない、mysqlタイプのものを使用している。

S3について:

---AWS料金体系---

・EC2
--料金内訳--
  ・インスタンス料金
  ・通信料金

-インスタンス料金-
  ・インスタンスバージョンによって違う
  ・起動時間は1時間あたり計算のため1ヶ月約730hで計算

[料金]=[インスタンスバージョン]*[起動時間]

-通信料金-
  ・従量課金制だと1GBあたりにかかる料金が一月の通信料の範囲によって設定されている
  ・いわゆるPV数みたいなものが通信量の目安となる

[料金]=[1GBあたりの料金]*[通信量]

・RDS
--料金内訳--
  ・インスタンス料金
  ・DBに付随するストレージ料金
  ・バックアップストレージ料金

-インスタンス料金-
  ・インスタンスバージョンによって違う
  ・起動時間は1時間あたり計算のため1ヶ月約730hで計算

[料金]=[インスタンスバージョン]*[起動時間]

-ストレージ料金-
  ・マグネティックストレージ(旧型なので採用しない)
  ・汎用(SSD)ストレージ(本番環境の試用、小規模アプリならこちらでいい？)
  ・プロビジョンドストレージ(より本番の大量I/Oの処理に対して強い)

[料金]=[ストレージバージョン]*[容量]

-バックアップ料金-
  ・試運転の時は必要なさそう
  ・未調査

・S3
--料金内訳--
  ・データ容量料金
  ・データのリクエスト料金
  ・データの転送量料金

-データ容量料金-
  ・データの容量のみに依存

[料金]=[データ容量]*[1GBあたりの料金]

-データのリクエスト料金-
  ・PV数による
  ・1PVあたりのリクエスト数にもよる

[料金]=[PV数]*[1PVあたりのリクエスト数]*[リクエストあたりの料金]

-データの転送量-
  ・PV数による
  ・1PVあたりのデータ転送量にもよる

[料金]=[PV数]*[1PVあたりの転送量]*[転送量あたりの料金]

---具体的な接続などのコマンド(Linuxコマンド中心)---

ec2に接続
ssh -i "/Users/kiyo/Desktop/RIWB/.ssh/RIWBacademy.pem(接続キー)" ec2-user@"パブリックIPv4 DNS"
ec2の接続解除
exit (ec2ユーザー中で)

ec2内の操作、基本的にlinuxコマンドで操作する
接続後初めに/home/ec2-userにいるが、/にはlinuxの様々なファイルがある。また、/home/にec2-userディレクトリがあるが
それとは別に/にrootユーザーディレクトリがあり、sudo -iによりルートユーザーとして操作可能になる、インストールなどはルートユーザーでないと行えない。
一般ユーザーの時にコマンドに対してsudoをつけることでルートユーザーのみが行えるコマンドを実行できる。コマンドでエラーした場合権限がないパターンではないか確認する。

現在のディレクトリ確認:
pwd

ディレクトリ、ファイルの一覧
ls,ls "見たい場所のディレクトリ"

ディレクトリの移動
cd '移動先、絶対パスか相対パスで'

ディレクトリの作成
mkdir 'ディレクトリ名'

ファイルの作成
touch "ファイル名"

ファイルの閲覧
cat "対象ファイル"

ファイルの最終行から数行を表示
tail -f '見たいファイル'(fをつけると強制)

ファイルの削除
rm "ファイル名",rm -rf "ファイル名"(警告文を無視して実行)

インストール系
yum install "インストール対象",yum install -y "インストール対象"（確認を省いて実行）
yumはunix系のパッケージ管理コマンド

サーバーの停止など
systemctl start(stop,restart,status) httpd.service

仮想環境の作成(普段同様)
実行したpythonのバージョンにより、作成した環境のpythonバージョンも決まるらしい
python3 -m venv '作成したい環境名'

mysqlに対する接続:
mysql -u "ユーザー名" -p -h "rdsのパブリックIPv4 DNS"

各種ファイルの場所
apache設定ファイル
/etc/httpd/conf/httpd.conf
アクセス、エラーログ
/var/log/httpd/access_log
/var/log/httpd/error_log

---vimの使い方---
指定ファイルの編集開始:vi ファイル名
書き込みモード:a
書き込み終了:esc
上書き保存: :wq

---開発の反映手順---
①Djangoフォルダの今のriwb-academyフォルダを削除(rmコマンド)
②git cloneで最新版をDjangoフォルダ下にクローン
③トップにlogディレクトリ、config下にlocal_settings_ec2ファイルを作成(mkdir,touchコマンド)
④作成したlocal_settings_ec2.pyファイルにコピペ(viコマンドで書き込み)
⑤settings.pyのローカル参照ファイルを変更
⑥study/views.pyのcsv読み取り中のファイルパスを変更
⑦起動するか確認(python3 manage.py runserver,sudo systemctl restart httpd.service)